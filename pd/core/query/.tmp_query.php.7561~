<?php

/*
 * Object Query
 * 
 * This object handles all queries
 * 
 * Selects, updates, inserts, and deletes
 * 
 * Security - Never allow user input to be the query string
 * 
 */

class query {
	
	private $mysql_user = "cult_user";
  private $mysql_password = "riteofpassage";
  private $mysql_database = "cultoflogic";
	
	//change mysql location to localhost when live, webceleb.com when local testing
	//private	$mysql_location = 'webceleb.com';
  private	$mysql_location = 'localhost';
  
  public function __construct($data) {
    $this->open_mysql();
  }

	/*
	 * Select function
	 * 
	 * returns false if query was not valid
	 * 
	 * parameters
	 * 
	 * select_qry - string that defines which select query to execute
	 * data - array of data values to be used in the query statement
	 * 
	 */
	public function select($select_qry, $data) {
		$file_name = 'query/selects/'.$select_qry.'.php';
		
		if (!file_exists($file_name)) {
			$_SESSION['error'][] = "$file_name file not found";
			return false;
		}
		else {
			//file should define $qry_str and use $data
			include($file_name);
			
			//check if qry_str was set
			if (!isset($qry_str)) {
				$_SESSION['error'][] = "$qry_str not defined in file $file_name found";
				return false;
			}
        
			$res = mysql_query($qry_str) or die(mysql_error());
			while(($res_ary[] = mysql_fetch_assoc($res)) || array_pop($res_ary));

			return $res_ary; 		
		}
	
  }
  
  
  private function get_count() {
    $q_str = 'select FOUND_ROWS();';
    $res = mysql_query($q_str) or die(mysql_error());

    return mysql_result($res, 0, 'FOUND_ROWS()');
  }
  
	
	/*
	 * Gets row count from last query
	 */
	
	public function insert($table, $data, $insert_quotes = true) {
  
		/*
		 * INSERT INTO 'tablename' (col1, col2, col3, col4, col5) values ('foobar', 495, 'val3', 720, 834.987)
		 */

		// Find all the keys (column names) from the array $data
		$columns = array_keys($data);
		
		// Find all the values from the array $data
		$values = array_values($data);
		
		// quote_smart the values
		for ($i = 0; $i < count($values); $i++){
		  if ($insert_quotes) {
			  $values[$i] = "'".$values[$i]."'";
      }
      else {
        $values[$i] = $values[$i];
      }
		}
		
		// Compose the query
		$sql = "INSERT INTO $table ";
		
		// create comma-separated string of column names, enclosed in parentheses
		$sql .= "(" . implode(", ", $columns) . ")";
		$sql .= " values ";
		
		// create comma-separated string of values, enclosed in parentheses
		$sql .= "(" . implode(", ", $values) . ")";
		
		$result = @mysql_query ($sql) or die (mysql_error());
		
		return mysql_insert_id();
  }
	
	public function update($table, $id, $data, $insert_quotes = true) {
		/*
		 * Data is in the form
		 * 
		 * column => value
		 */
		
		if ($id > 0) {
			$qry_str = "update $table set ";
		
			foreach ($data as $col => $val) {
				if ($insert_quotes) {
					$qry_str .= "$col = '$val',";
				}
				else {
					$qry_str .= "$col = $val,";
				}
			}
			
			$qry_str = rtrim($qry_str, ',');
			
			$qry_str .= " where id = '$id'";
			
			//echo $qry_str;
			$result = @mysql_query ($qry_str) or die (mysql_error());
		}
	}
	
	public function delete($table, $id, $data = array()) {
		if (empty($data)) {
			$qry_str = " delete from $table where id = '$id' ";
		}
		else {
			$qry_str = "delete from $table where ";
			foreach ($data as $col => $val) {
				$qry_str .= "$col = '$val' && ";
			}
			$qry_str = rtrim($qry_str, ' && ');
		}
		
		$result = @mysql_query ($qry_str) or die (mysql_error());
	}

	public function open_mysql() {
		$conn = mysql_connect($this->mysql_location, $this->mysql_user, $this->mysql_password)
	    or die(mysql_error());
	  mysql_select_db($this->mysql_database ,$conn) or die(mysql_error());
	}
}

?>