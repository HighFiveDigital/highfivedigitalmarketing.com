<?php

/**
 * PD main
 * 
 * The core for Palmer dev websites
 * 
 * Version 0.1
 */

namespace pd;

class main {
  
  /**
   * @var
   * obj - stores all object instances
   * error_on - turns on error reporting
   */
  
  private $obj = array();
  private $obj_checked = array();
  private $errors = array();
  private $error_on = true;
  private $ajax = true;
  private $path = 'pd/';
  protected $pd_parent;
  
  
  /**
   * Init
   * @return 
   */
  public function __construct() {
    require_once($this->path.'config.php');
  }
  
  public function init() {
    $this->filter_input(); //clean incoming user data
    //$this->process_post(); //process all posts
    $this->process_action(); //processes all actions
    
    
    //$this->login_user(); //logs in the user
    //$this->init_errors();
  }
  
  private function filter_input() {
    pd('filter')->input_ary($_POST);
    pd('filter')->input_ary($_GET);
    pd('filter')->input_ary($_COOKIE);
    pd('filter')->input_ary($_REQUEST);
  }
  
  public function write($str, $format = 'html') {
    echo pd('filter')->output_str($str, $format);
  }
  
  public function get_cur_dir() {
    return dirname($this->loc);
    //return dirname(__FILE__);
  }
  
  private function process_post() {
    //write errors to $GLOBALS['error']
    if (!empty($_POST) && !empty($_POST['form']) && !empty($_POST['pd'])) {
      $path = 'pd/'.$_POST['pd'].'/posts/'.$_POST['form'].'.php';
      if (file_exists($path)) {
        include($path);
      }
    }
  }
  
  private function process_action() {
    pd('actions')->init();
  }
  
  private function login_user() {
    pd('users')->init_login();
  } 

  
  //build methods
  
  /**
   * build - constructs html blocks
   * @return 
   * @param array $data
   */
  
  
  public function disp($data, $field, $filter = 'html_single', $length = 0) {
    echo $this->obj('filter')->output_str(pd($this->get_pd())->rec($data, $field), $filter, $length);
  }
  
  public function build($folder, $data) {
    $this->include_file($this->get_pd(), $data['file'], $folder, $data);
  }
  
  public function build_pd_link($data) {  
    echo 'pd.php?pd='.$this->get_pd().'&'.http_build_query($data, null, '&');
  }
  
  public function goto_pd($data) {
    
    header('location:pd.php?pd='.$this->get_pd().'&'.http_build_query($data, null, '&'));
  }
  
  /**
   * obj
   * 
   * @return 
   * @param object $type
   */
  
  public function obj($type, $sub) {
    if (!empty($sub)) {
      $obj = $sub;
      $parent = $type;
    }
    else {
      $obj = $type;
      $parent = '';
    } 

    if ($this->include_file($obj, $obj, '', $data, $parent)) {
      if (!isset($this->obj[$data['namespace']][$obj])) {
        $eval = '$new_obj = new '.$data['namespace'].'\\'.$obj.'();';
        eval($eval);
        $this->obj[$data['namespace']][$obj] = $new_obj;
      }
      $this->obj[$data['namespace']][$obj]->pd_parent = $parent;
      
      return $this->obj[$data['namespace']][$obj];
    }
  }
  
  public function pd($obj) {
    pd($this->get_pd(), $obj);
  }
  
  
  protected function include_file($pd, $file, $folder = '', &$data = array(), $parent = '') {
    if (!empty($folder)) {
      $folder .= '/';
    }
    
    if (!empty($parent)) {
      $paths['pd\\'.$parent] = $this->path.$parent.'/'.$pd.'/'.$folder.$file.'.php';
    }
    $paths['pd'] = $this->path.$pd.'/'.$folder.$file.'.php';
    $paths['pd\\core'] = $this->path.'core/'.$pd.'/'.$folder.$file.'.php';
    
    foreach ($paths as $namespace => $path) {
      if (file_exists($path)) {
        require($path);
        $data['namespace'] = $namespace;
        return true;
      }
    }
    return false;
  }
  
  
  /**
   * sub
   */
  
  protected function sub($sub) {
    if (!isset($this->subs[get_class($this)][$sub])) {
      //include class definition
      require_once($this->get_cur_dir().'/'.$sub.'/'.$sub.'.php');
      
      //create new instance of object
      $eval = '$sub_obj = new pd_'.$sub.'();';
      eval($eval);

      //return object
      $this->subs[get_class($this)][$sub] = $sub_obj;
    }
    return $this->subs[get_class($this)][$sub];
  }
  
  //for variable requirements
  protected function req($require, $data) {
    if (empty($require)) {
      return;
    }
    foreach ($require as $req) {
      if (!isset($data[$req])) {
        $this->err($req.' is required');
      }
    }
  }
  
  //for coding errors
  protected function err($error) {
    if (DEBUG_MODE) {
      echo "
        <div class=\"php_error\">
          error: $error <br/>
          location: ";
      debug_print_backtrace();      
      echo "
        </div>";
      exit;
    }
  }
  
  //for class methods
  public function get_pd() {
    return get_class($this);
  }
  
  
  
  /**
   * Url Methods
   * @return 
   */
  
  public function cur_url() {
    echo $_SERVER['REQUEST_URI'];
    //echo ltrim($_SERVER['REQUEST_URI'], '/');
  }
  
  public function get_full_cur_url() {
    $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on'
      ? 'https://'
      : 'http://';
    return $protocol . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
  }
  
  
  //for retrieving info for a record
  protected function get($data, $field = '') {
    if (empty($data['id'])) {
      return;
    }
    $this->req(array('id'), $data);

    return pd('query')->rec(array('id' => $data['id'], 'table' => $this->table), $field);
  }
  
  public function get_ip_add() {
    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {  //check ip from share internet 
      $ip=$_SERVER['HTTP_CLIENT_IP'];
    }
    elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {  //to check ip is pass from proxy
      $ip=$_SERVER['HTTP_X_FORWARDED_FOR'];
    }
    else {
      $ip=$_SERVER['REMOTE_ADDR'];
    }
    return $ip;
  }
  
  
  
  
}

?>